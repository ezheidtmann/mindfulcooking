<?php

function patdb_reports_menu() {
  $items = array();
  $items['reports/all-reps-by-cluster.pdf'] = array(
    'title' => 'All Reps by Cluster (PDF)',
    'page callback' => 'patdb_reports_reps_by_cluster',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
* @brief Ensure TCPDF and rep_report_pdf are both present
*
* @return No return value.
*/
function patdb_reports_require_tcpdf() {
  if (function_exists('libraries_get_path')) {
    $path = libraries_get_path('tcpdf');
  }
  else {
    $path = DRUPAL_ROOT .'/sites/all/libraries/tcpdf';
  }

  require_once $path .'/tcpdf.php';
  require_once 'rep_report.inc';
}

/**
* @brief Build the query object for the "building reps by cluster" report
*        The query selects reps, ordered by
*        cluster and school, with "Head Rep" members listed first.
*
* @return No return value.
*/
function patdb_reports_reps_query() {
  // Get building rep tid
  $building_rep = array_pop(taxonomy_get_term_by_name('Building Rep'));
  $head_rep = array_pop(taxonomy_get_term_by_name('Head Rep'));

  $tid_order = ($head_rep->tid > $building_rep->tid) ? 'DESC' : 'ASC';

  $q = db_select('node', 'n');
  $q->addField('n', 'nid', 'nid');
  $q->addField('n', 'title', 'title');

  // Get home phone and email, if present
  $q->leftJoin('field_data_field_home_phone', 'p',
    "n.nid = p.entity_id AND p.entity_type = 'node' AND p.deleted = 0");
  $q->addField('p', 'field_home_phone_value', 'home_phone');

  $q->leftJoin('field_data_field_email', 'e',
    "n.nid = e.entity_id AND e.entity_type = 'node' AND e.deleted = 0");
  $q->addField('e', 'field_email_email', 'email');

  // Get the school nid first:
  $q->join('field_data_field_school', 's',
    "n.nid = s.entity_id AND s.entity_type = 'node' AND s.deleted = 0");
  $q->addField('s', 'field_school_nid', 'school_nid');

  // Then the school's title:
  $q->join('node', 'ns', "ns.nid = s.field_school_nid");
  $q->addField('ns', 'title', 'school_title');
  // And the school's office phone, if present:
  $q->leftJoin('field_data_field_office_phone', 'sp',
    "ns.nid = sp.entity_id AND sp.entity_type = 'node' AND sp.deleted = 0");
  $q->addField('sp', 'field_office_phone_value', 'school_office_phone');

  // Cluster field in 'c', node row in 'nc':
  $q->join('field_data_field_cluster', 'c',
    "s.field_school_nid = c.entity_id AND c.entity_type = 'node' AND c.deleted = 0");
  $q->addField('c', 'field_cluster_nid', 'cluster_nid');

  $q->join('node', 'nc', "nc.nid = c.field_cluster_nid");
  $q->addField('nc', 'title', 'cluster_title');

  // Cluster director requires another two-step join:
  $q->leftJoin('field_data_field_director', 'd', "nc.nid = d.entity_id AND d.entity_type = 'node' AND s.deleted = 0");
  $q->leftJoin('node', 'nd', "nd.nid = d.field_director_nid");
  $q->addField('nd', 'title', 'cluster_director_name');

  // Roles are used for ordering, but not in result records.
  $q->join('field_data_field_roles', 'r',
    "n.nid = r.entity_id AND r.entity_type = 'node' AND r.deleted = 0");

  // Finally, conditions and ordering.
  $q->condition('n.status', 1)
    ->condition('n.type', 'member')
    ->condition('r.field_roles_tid', array($building_rep->tid, $head_rep->tid), 'IN')
    ->orderBy('cluster_title')
    ->orderBy('school_title')
    ->orderBy('r.field_roles_tid', $tid_order)
    ->orderBy('n.title');

  return $q;
}

/**
* @brief Create the "building reps by cluster" report, using the
*        rep_report_pdf class to do the PDF layout.
*
* @param $filename Name of output filename
*
* @return No return value.
*/
function patdb_reports_reps_by_cluster($filename) {
  if ($cache = cache_get('patdb_reports_reps_by_cluster')) {
    $output = $cache->data;
  }
  else {
    $q = patdb_reports_reps_query();
    print $q . "\n";
    $result = $q->execute();

    // Query results will contain duplicates because we are matching
    // two "role" tids. So we save members as we iterate, indexed by
    // nid to eliminate dupes. A helper function lets us easily
    // output & clear the $members array whenever we reach the end
    // of a school or cluster.
    patdb_reports_require_tcpdf();
    $pdf = new rep_report_pdf();
    $school = $cluster = NULL;
    $members = array();
    while ($member = $result->fetchObject()) {
      if (is_null($cluster) || $member->cluster_nid != $cluster->nid) {
        _patdb_reports_rbc_add_members($pdf, $members);
        $cluster = new stdClass;
        $cluster->nid = $member->cluster_nid;
        $cluster->title = $member->cluster_title;
        $cluster->director = $member->cluster_director_name;
        if (empty($cluster->director)) { $cluster->director = '[none]'; }
        $pdf->newCluster($cluster->title, $cluster->director);
      }
      if (is_null($school) || $member->school_nid != $school->nid) {
        _patdb_reports_rbc_add_members($pdf, $members);
        $school = new stdClass;
        $school->nid = $member->school_nid;
        $school->title = $member->school_title;
        $phone = $member->school_office_phone;
        $phone = theme('nice_phone_number', array('number' => $phone));

        $pdf->newSchool($school->title, $phone);
      }
      $members['nid_'. $member->nid] = $member;
    }
    _patdb_reports_rbc_add_members($pdf, $members);

    $output = $pdf->Output($filename, 'S');
    cache_set('patdb_reports_reps_by_cluster', $output);
  }

  drupal_add_http_header('Content-type', 'application/pdf');
  drupal_add_http_header('Content-disposition', 'inline; filename="'. $filename .'"');

  print $output;
}

/**
* @brief Add $members to $pdf and clear $members.
*
* @param $pdf A rep_report_pdf object to which to add the members
* @param $members An array of $member objects containing these properties:
*     $member->home_phone,
*     $member->email,
*     $member->title
*
* @return No return value.
*/
function _patdb_reports_rbc_add_members(&$pdf, &$members) {
  if (count($members)) {
    foreach ($members as $member) {
      $phone = theme('nice_phone_number', array('number' => $member->home_phone));
      $pdf->newMember($member->title, $phone, $member->email);
    }
    $members = array();
  }
}

function patdb_reports_node_delete($node) {
  if (in_array($node->type, array('member', 'school', 'cluster'))) {
    cache_clear_all('patdb_reports_reps_by_cluster', 'cache');
  }
}

function patdb_reports_node_presave($node) {
  if (in_array($node->type, array('member', 'school', 'cluster'))) {
    cache_clear_all('patdb_reports_reps_by_cluster', 'cache');
  }
}
