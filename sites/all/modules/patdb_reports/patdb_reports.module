<?php

function patdb_reports_reps_query() {
  // Get building rep tid
  $building_rep = array_pop(taxonomy_get_term_by_name('Building Rep'));
  $head_rep = array_pop(taxonomy_get_term_by_name('Head Rep'));

  $tid_order = ($head_rep->tid > $building_rep->tid) ? 'DESC' : 'ASC';
  
  $q = db_select('node', 'n');
  $q->join('field_data_field_school', 's', "n.nid = s.entity_id AND s.entity_type = 'node' AND s.deleted = 0");
  $q->join('field_data_field_cluster', 'c', "s.field_school_nid = c.entity_id AND c.entity_type = 'node' AND c.deleted = 0");
  $q->join('field_data_field_roles', 'r', "n.nid = r.entity_id AND r.entity_type = 'node' AND r.deleted = 0");
  $q->join('field_data_field_home_phone', 'p', "n.nid = p.entity_id AND p.entity_type = 'node' AND p.deleted = 0");
  $q->join('field_data_field_email', 'e', "n.nid = e.entity_id AND e.entity_type = 'node' AND e.deleted = 0");
  $q->addField('n', 'nid', 'nid');
  $q->addField('n', 'title', 'title');
  $q->addField('p', 'field_home_phone_value', 'home_phone');
  $q->addField('e', 'field_email_email', 'email');
  $q->addField('s', 'field_school_nid', 'school_nid');
  $q->addField('c', 'field_cluster_nid', 'cluster_nid');
  $q->condition('n.status', 1)
    ->condition('n.type', 'member')
    ->condition('s.field_school_nid', 0, '>') // omit members with no school
    ->condition('c.field_cluster_nid', 0, '>') // omit schools with no cluster
    ->condition('r.field_roles_tid', array($building_rep->tid, $head_rep->tid), 'IN')
    ->orderBy('cluster_nid')
    ->orderBy('school_nid')
    ->orderBy('r.field_roles_tid', $tid_order)
    ->orderBy('n.title');

  return $q;
}

function &_patdb_reports_pdf() {
  static $pdf = NULL;
  if (is_null($pdf)) {
    require_once DRUPAL_ROOT . '/sites/all/libraries/tcpdf/tcpdf.php';
    require_once DRUPAL_ROOT .'/sites/all/modules/patdb_reports/rep_report.inc';
    $pdf = new rep_report_pdf();
  }
  return $pdf;
}

function patdb_reports_print() {
  $pdf = &_patdb_reports_pdf();
  $q = patdb_reports_reps_query();
  print (string) $q . "\n";
  $result = $q->execute();

  $school = $cluster = NULL;
  $members = array();
  while ($member = $result->fetchObject()) {
    if (is_null($cluster) || $member->cluster_nid != $cluster->nid) {
      if (count($members)) {
        patdb_reports_print_members($members);
        $members = array();
      }
      $cluster = node_load($member->cluster_nid);
      print "Cluster: ". $cluster->title ."\n";
      $pdf->newCluster($cluster->title, 'Unknown');
    }
    if (is_null($school) || $member->school_nid != $school->nid) {
      // finish up previous school
      if (count($members)) {
        patdb_reports_print_members($members);
        $members = array();
      }
      $school = node_load($member->school_nid);
      print "  School: ". $school->title ."\n";
      $pdf->newSchool($school->title, '123-456-7890');
    }
    $members['nid_'. $member->nid] = $member;
  }
  
  if (count($members)) {
    patdb_reports_print_members($members);
  }

  $pdf->Output('output.pdf', 'F');
}

function patdb_reports_print_members($members) {
  $pdf = &_patdb_reports_pdf();
  foreach ($members as $member) {
    print "    Member: ". $member->title ."\n";
    print "      http://d/patdb1/node/". $member->nid ."\n";
    $phone = theme('nice_phone_number', array('number' => $member->home_phone));
    if (!empty($phone)) {
      print "      ". $phone ." (h)\n";
    }
    if (!empty($member->email)) {
      print "      ". $member->email ."\n";
    }

    $pdf->addMember($member->title, $phone, $member->email);
  }
}
