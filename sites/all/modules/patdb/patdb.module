<?php

function _patdb_setup_pathauto() {
  // Set up pathauto patterns
  variable_set('pathauto_taxonomy_term_committees_pattern', 'committee/[term:name]');
  variable_set('pathauto_taxonomy_term_roles_pattern', 'role/[term:name]');
  variable_set('pathauto_node_cluster_pattern', 'cluster/[node:title]');
  variable_set('pathauto_node_member_pattern', 'member/[node:title]');
  variable_set('pathauto_node_school_pattern', 'school/[node:title]');

  // Ensure they're all up to date!

}

function _patdb_setup_content() {
  foreach (array('cluster', 'member', 'school') as $type) {
    variable_set("node_options_$type", array('status', 'revision'));
  }

  // disable "submitted by ..." on page nodes
  variable_set('node_submitted_page', 0);

  module_load_include('inc', 'patdb', 'patdb-default-data');
  $node = _patdb_node_reports();
  node_object_prepare($node);
  node_submit($node);
  node_save($node);
  // TODO: change url alias
  variable_set('patdb_reports_nid', $node->nid);
}

function _patdb_setup_menu() {
  $link = array(
    'link_path' => 'node/'. variable_get('patdb_report_nid', 0),
    'link_title' => 'Reports',
    'menu_name' => 'main-menu',
    'weight' => 10, // want this after other links added by features
  );
  menu_link_save($link);
}

function _patdb_setup_views() {
  // move views blocks to content area
  // (assuming they exist already)
  // FIXME: This fails silently if the blocks do not exist.
  // 1) get the weight of the main content
  $main_weight = db_select('block')
    ->fields('block', array('weight'))
    ->condition('module', 'system')
    ->condition('delta', 'main')
    ->execute()->fetchField();

  // 2) add the views blocks to the content area below the content
  db_update('block')
    ->fields(array(
      'region' => 'content',
      'status' => 1,
      'weight' => $main_weight + 1, ))
    ->condition('module', 'views')
    ->condition('delta', array('members_by_school-block_1', 'schools_by_cluster-block_1'), 'IN')
    ->execute();
}

function _patdb_setup_permissions() {
  _patdb_setup_roles();
  $db_viewer    = user_role_load_by_name('database viewer');
  $db_user      = user_role_load_by_name('database user');
  $db_admin     = user_role_load_by_name('database admin');
  $drupal_admin = user_role_load_by_name('drupal admin');

  // reset all permissions
  db_delete('role_permission')
   ->condition('rid',
     array($db_viewer->rid, $db_user->rid, $db_admin->rid, $db_admin->rid),
     'IN')
   ->execute();

  // viewer permissions
  // view content & revisions
  $permissions = array('access content', 'view revisions');
  user_role_grant_permissions($db_viewer->rid, $permissions);

  // db user permissions
  // edit or create any content, + viewer permissions
  $permissions[] = 'revert revisions';
  foreach (array('cluster', 'school', 'member') as $type) {
    foreach (array('create', 'edit any') as $action) {
      $permissions[] = $action .' '. $type .' content';
    }
  }
  user_role_grant_permissions($db_user->rid, $permissions);

  // db admin
  // delete stuff, manage taxonomy, + user permissions
  $permissions[] = 'delete revisions';
  $permissions[] = 'administer taxonomy';
  foreach (array('cluster', 'school', 'member') as $type) {
    $permissions[] = 'delete any '. $type .' content';
  }
  user_role_grant_permissions($db_admin->rid, $permissions);

  // drupal admin: all permissions!
  $permissions = array_keys(module_invoke_all('permission'));
  user_role_grant_permissions($drupal_admin->rid, $permissions);

  return _patdb_remove_anon_permissions();
}

function _patdb_remove_anon_permissions() {
  // Find the role ID for anonymous users (usually 1)
  $anonymous_rid = db_select('role')
    ->fields('role', array('rid'))
    ->condition('name', 'anonymous user')
    ->execute()->fetchField();

  if ($anonymous_rid) {
    // Ensure they have no permissions whatsoever
    db_delete('role_permission')
      ->condition('rid', $anonymous_rid)
      ->execute();
    return true;
  }

  return false;
}

function _patdb_setup_registration() {
  // Ensure users can only be added by administrators
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
}

function _patdb_setup_roles() {
  $names = array(
    'database viewer',
    'database user',
    'database admin',
    'drupal admin',
  );

  $roles = user_roles();
  foreach ($names as $name) {
    if (!in_array($name, $roles)) {
      $role = new stdClass;
      $role->name = $name;

      user_role_save($role);
    }
  }

  variable_set('user_admin_role', user_role_load_by_name('drupal admin')->rid);
}

function _patdb_setup_users() {
  $rick = user_load_by_name('rkolinsky');

  if (!$rick) {
    $rick = (object) (array(
      'name' => 'rkolinsky',
      'pass' => '$S$DKtZTqr0MChN/R8ryRbwyfYbvkpGzmKQSt7sVHopo8j61eJiePzC',
      'mail' => 'rick.kolinsky@gmail.com',
      'status' => '1',
      'timezone' => 'America/Los_Angeles',
      'init' => 'rick.kolinsky@gmail.com',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      ),
    ));
  }

  $drupal_admin = user_role_load_by_name('drupal admin');
  $rick->roles[$drupal_admin->rid] = $drupal_admin->name;

  return user_save($rick);
}
